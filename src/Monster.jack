class Monster {
    // Instance variables
    field int x;
    field int y;
    field MonsterSprites monsterSprites;
    field boolean direction;                      //true - Right
    field boolean backX;
    field boolean backY;
    field boolean verticalReady;
    field boolean death;
    field int way;
		field int location;
    field int lifes;

    constructor Monster new (){
        let lifes = 5;
        let x = 22;                               //right 22 - left 1
        let y = 90;                               //down 160 - up 20 - center 90
        let location = location(x, y);
        let way = 4;
        let backX = false;
        let backY = false;
        let verticalReady = false;
        let death = false;
        let way = 2;                               //right 22 - left 1
        let direction = false;                     //left
        let monsterSprites = MonsterSprites.new();
        do monsterSprites.draw_MOVE_LEFT(location);
        return this;
    }

    method int getX(){
        return x;
    }

    method int getY(){
        return y;
    }
		
		method boolean isDeath() {
				return death;
		}

    method void setDirection(boolean newDirection) {
        let direction = newDirection;
        return;
    }

		method void takeDamage() {
				let lifes = lifes - 1;
				return;
		}

		method void lifeCheck() {
				if (lifes = 0) {
						let death = true;
				}
				return;
		}

    method int location(int x, int y){
        return Math.multiply(y, 32) + x;
    }

		method void die() {
				var int count;
				var int delay;
				let count = 0;
				let delay = 45;
				let location = location(x, y);
				do monsterSprites.draw_ERASE(location);
				while (~(count = delay)) {
						// code to be executed repeatedly
						do monsterSprites.die_three(location);
						let count = count + 1;
				}
				let count = 0;
				do monsterSprites.draw_ERASE(location);
				while (~(count = delay)) {
						// code to be executed repeatedly
						do monsterSprites.die_two(location);
						let count = count + 1;
				}
				let count = 0;
				do monsterSprites.draw_ERASE(location);
				while (~(count = delay)) {
						// code to be executed repeatedly
						do monsterSprites.die_one(location);
						let count = count + 1;
				}
				return;
		}

    method void moveDown () {
        if((y + 48) < 255){
            // Erase
            let location = location(x, y);
            do monsterSprites.draw_ERASE(location);            // Update position
            let y = y + 10;
            // Draw
			let location = location(x, y);
            if(direction){
                do monsterSprites.draw_MOVE_RIGHT(location);
            }else{
                do monsterSprites.draw_MOVE_LEFT(location);
            }
        }
        return;
    }

    method void moveUp () {
        if(y > 5){
            // Erase
            let location = location(x, y);
            do monsterSprites.draw_ERASE(location);
            // Update position
            let y = y - 10;
            // Draw
            let location = location(x, y);
            if(direction){
                do monsterSprites.draw_MOVE_RIGHT(location);
            }else{
                do monsterSprites.draw_MOVE_LEFT(location);
            }
        }
        return;
    }

    method void moveRigth () {
        if(x < 29){
            // Erase
            let location = location(x, y);
            do monsterSprites.draw_ERASE(location);            // Update position
            let x = x + 3;
            // Draw
			let location = location(x, y);
            do setDirection(true);
            do monsterSprites.draw_MOVE_RIGHT(location);
        }
        return;
    }

    method void moveLeft () {
        if(x > 1){
            // Erase
            let location = location(x, y);
            do monsterSprites.draw_ERASE(location);            // Update position
            let x = x - 3;
            // Draw
            let location = location(x, y);
            do setDirection(false);
            do monsterSprites.draw_MOVE_LEFT(location);
        }
        return;
    }

    method void attack(){
        if( ~(backX) ){
            if(x = 1){
                let backX = true;
            } else {
                do moveLeft();
            }
        } else {
            if(x = 22){
                let backX = false;
                let backY = true;
                let verticalReady = false;
            } else {
                do moveRigth();
            }
        }
        return;
    }

    method void goUp(){
        if( ~(verticalReady) & ~(backY) ){
            if(y = 20){
                let verticalReady = true;
            } else {
                do moveUp();
            }
        }
        return;
    }

    method void goUpBack(){
        if( ~(verticalReady) & (backY) ){
            if(y = 90){
                let backY = false;
                let way = LCGRandom.randRange(0, 4);
            } else {
                do moveDown();
            }
        }
        return;
    }

    method void goDown(){
        if( ~(verticalReady) & ~(backY) ){
            if(y = 160){
                let verticalReady = true;
            } else {
                do moveDown();
            }
        }
        return;
    }

    method void goDownBack(){
        if( ~(verticalReady) & (backY) ){
            if(y = 90){
                let backY = false;
                let way = LCGRandom.randRange(0, 4);
            } else {
                do moveUp();
            }
        }
        return;
    }

    method void init(){
				if (death) {
						do die();
						return;
				}
        if(way = 0){                                // Up
            do goUp();
            if((verticalReady) = true){
                let verticalReady = false;
                let backY = true;
            }
            do goUpBack();
        }
        if(way = 1){                                // Down
            do goDown();
            if((verticalReady) = true){
                let verticalReady = false;
                let backY = true;
            }
            do goDownBack();
        }
        if(way = 2){                                // Up and attack
            do goUp();
            if((verticalReady) = true){
                do attack();
            }
            do goUpBack();
        }
        if(way = 3){                                // Center and attack
            do attack();
            if(x = 22){
                let way = LCGRandom.randRange(0, 4);
            }
        }
        if(way = 4){                                // Down and attack
            do goDown();
            if((verticalReady) = true){
                do attack();
            }
            do goDownBack();
        }
        return;
    }

    method void dispose () {
        do Memory.deAlloc(this);
        return;
    }

}
