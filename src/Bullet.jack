class Bullet{

   // Instance variables
   field int x;
   field int y;
   field int direction;
   field boolean crashed;
   field int counterBullets;
   field Monster monster;

   constructor Bullet new (Monster newMonster){
      let x = 10;
      let y = 10;
      let direction = 1;      //(0, up) (1, right) (2, down) (3, left) 
      let counterBullets = 0;
      let crashed = false;
      let monster = newMonster;
      return this;
   }


   method boolean isCrashed() {
      return crashed;
   }


   method void draw() {
			do getCrashed();
      if((crashed) = (true)){
				 return;
      }
      do Screen.setColor(true);
      do Screen.drawCircle(x, y, 4);
      return;
   }


   method void erase(){
      do getCrashed();
      if((crashed) = (true)){
				 return;
      }
      do Screen.setColor(false);
      do Screen.drawCircle(x, y, 4);
      return;
   }

   
   // Crashed with the walls validation
   method void getCrashed(){
      if((x < 10) | (x > 500) | (y < 10) | (y > 240)){
         let crashed = true;
				 return;
      }
      if( (x > (Math.multiply(monster.getX(),16) + 5)) & (x < (Math.multiply(monster.getX(), 16) + 60)) & (y > (monster.getY() + 5)) & (y < (monster.getY() + 60)) ){	
         let crashed = true;
				 do monster.takeDamage();
				 do monster.lifeCheck();
				 return;
      }
			return;
   }


   // Move the bullet
   method void update() {
      // Erase
      // Direction validations
			do getCrashed();
      if((crashed) = (true)){
				 return;
      }
      do erase();
      if(direction = 0){
         let y = y - 10;
      } else {
         if(direction = 1){
            let x = x + 10;
         } else {
            if(direction = 2){
               let y = y + 10;
            } else {
               let x = x - 10;
            }
         }
      }
      // Draw
      do draw();
      return;
   }


   // Reset/"create" a new bullet (other shoot)
   method void init(int nx, int ny, int nDirection) {
      do erase();
      let x = nx;
      let y = ny;
      let direction = nDirection;
      let crashed = false;
      let counterBullets = 0;
      return;
   }


   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

}
